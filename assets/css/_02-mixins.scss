// http://sass-lang.com/documentation/Sass/Script/Functions.html#unitless-instance_method
// http://sass-lang.com/guide

// mobile

@mixin desktop {
	@media only screen and (min-width: #{$tablet-width + 1px}) {
		@content;
	}
}
@mixin tablet {
	@media only screen and (max-width: #{$tablet-width}) {
		@content;
	}
}
@mixin phone {
	@media only screen and (max-width: #{$phone-width}) {
		@content;
	}
}

// embeds
// see: wp-includes/class-wp-oembed.php

@function iframes($values...) {
	$attr: ('src','data-src');
	$selector: '';
	@for $i from 1 through length($values) {
		$value: nth($values, $i);
		@for $j from 1 through length($attr) {
			$selector: #{$selector + "iframe["+nth($attr, $j)+"*=\""+$value+"\"]"};
		    @if $j < length($attr) {
				$selector: #{$selector+", "};
		    }
		}
	    @if $i < length($values) {
			$selector: #{$selector+", "};
	    }
	}
	@return $selector;
}
$iframe-video: iframes("youtube.com/","vimeo.com/","embed.twitch.tv","dailymotion.com/","hulu.com/","collegehumor.com/","facebook.com/plugins/video","screencast.com/","wordpress.tv/","public-api.wordpress.com/");
$iframe-audio: iframes("soundcloud.com/","spotify.com/","mixcloud.com/");

// functions

@function strip-unit($num) {
	@if type-of($num) == 'number' and not unitless($num) {
		$num: $num / ($num * 0 + 1);
	}
	@return $num;
}

@function make-time($value, $unit: 's') {
	@if type-of($value) == 'number' and not index('s' 'ms', unit($value)) {
		$value: #{round(strip-unit($value))}#{$unit};
	}
	@return $value;
}

@function list-random($list) {
	@return nth($list, random(length($list)));
}

@mixin rem($property, $values...) {
	$max: length($values);
	$pxValues: '';
	$remValues: '';
	@for $i from 1 through $max {
		$value: nth($values, $i);
		@if type-of($value) == 'number' {
		    $value: strip-unit($value);
		    $pxValues: #{$pxValues + round($value * strip-unit($default-font-size))}px;
		    $remValues: #{$remValues + $value}rem;
		}
		@else {
			$pxValues: #{$pxValues + $value};
		    $remValues: #{$remValues + $value};
		}

	    @if $i < $max {
			$pxValues: #{$pxValues + " "};
			$remValues: #{$remValues + " "};
	    }
	}
	#{$property}: $pxValues;
	#{$property}: $remValues;
}

@mixin vw($property, $values...) {
	$max: length($values);
	$pxValues: '';
	$remValues: '';
	@for $i from 1 through $max {
		$value: nth($values, $i);
		@if type-of($value) == 'number' {
		    $value: strip-unit($value);
		    $pxValues: #{$pxValues + round($value * strip-unit($default-font-size) * 0.6)}px;
		    $remValues: #{$remValues + $value}vw;
		}
		@else {
			$pxValues: #{$pxValues + $value};
		    $remValues: #{$remValues + $value};
		}

	    @if $i < $max {
			$pxValues: #{$pxValues + " "};
			$remValues: #{$remValues + " "};
	    }
	}
	#{$property}: $pxValues;
	#{$property}: $remValues;
}

@mixin link($selector: a) {
	@if $selector == & {
		&, &:link, &:visited {
			@content;
		}
	}
	@else {
		#{$selector}, #{$selector}:link, #{$selector}:visited {
			@content;
		}
	}
}
@mixin hover($selector: a) {
	@if $selector == & {
		&:hover, &:active, &:focus {
			@content;
		}
	}
	@else {
		#{$selector}:hover, #{$selector}:active, #{$selector}:focus {
			@content;
		}
	}
}

@mixin clearfix {
	&:before,
	&:after {
	  content: "";
	  display: table;
	  table-layout: fixed;
	}
	&:after {
	  clear: both;
	}
	@content;
}

@mixin hyphens($value: auto) {
	-webkit-hyphens: $value;
	-moz-hyphens: $value;
	-ms-hyphens: $value;
	hyphens: $value;
	@if $value == auto {
		word-break: break-word;
		word-wrap: break-word;
	}
}

@mixin empty {
	&:-moz-only-whitespace { // only works on its own line.
		@content;
	}
	&:empty,
	&:blank {
		@content;
	}
}

@mixin aspect-ratio($width: 16, $height: 9, $max-width: 100vw, $print-height: true, $print-aspect-ratio: true) {
	$width: round($width);
	$height: round($height);
	@if $print-height {
		$ratio: $height/$width;
		height: calc(#{$max-width} * #{$ratio});
	}
	@if $print-aspect-ratio {
		@supports (aspect-ratio: #{$width}/#{$height}) {
			aspect-ratio: #{$width}/#{$height};
			height: auto !important;
			max-height: none;
		}
	}
}

// browser vendor prefixes

@mixin vendor-prefix($property, $value) {
	-webkit-#{$property}: #{$value};
	-ms-#{$property}: #{$value};
	-moz-#{$property}: #{$value};
	-o-#{$property}: #{$value};
	#{$property}: #{$value};
}

@mixin vendor-prefix-rem($property, $values...) {
	$max: length($values);
	$pxValues: '';
	$remValues: '';
	@for $i from 1 through $max {
		$value: nth($values, $i);
		@if type-of($value) == 'number' {
		    $value: strip-unit($value);
		    $pxValues: #{$pxValues + round($value * strip-unit($default-font-size))}px;
		    $remValues: #{$remValues + $value}rem;
		}
		@else {
			$pxValues: #{$pxValues + $value};
		    $remValues: #{$remValues + $value};
		}

	    @if $i < $max {
			$pxValues: #{$pxValues + " "};
			$remValues: #{$remValues + " "};
	    }
	}
	@include vendor-prefix(#{$property}, $pxValues);
	@include vendor-prefix(#{$property}, $remValues);
}

// animation helpers

@mixin keyframes($name) {
	@-webkit-keyframes #{$name} {
		@content;
	}
	@-moz-keyframes #{$name} {
		@content;
	}
	@-o-keyframes #{$name} {
		@content;
	}
	@keyframes #{$name} {
		@content;
	}
}

@mixin transition($property: all, $duration: 0.5s, $timing-function: ease, $delay: 0s, $important: '') {
	@if length($property) == 1 {
		@if $important != '' {
			@include vendor-prefix(transition, #{$property} #{make-time($duration)} #{$timing-function} #{make-time($delay)} #{$important});
		}
		@else {
			@include vendor-prefix(transition, #{$property} #{make-time($duration)} #{$timing-function} #{make-time($delay)});
		}
	}
	@else {
		@if $important != '' {
			transition-property: join($property, (), comma) $important;
		}
		@else {
			transition-property: join($property, (), comma);
		}
		transition-duration: make-time($duration);
		transition-timing-function: $timing-function;
		transition-delay: make-time($delay);
	}
	@content;
}

// flex - https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Mixins
@mixin display-flex($important: '') {
    @if $important != '' {
		display: -webkit-box $important;
		display: -moz-box $important;
		display: -webkit-flex $important;
		display: -ms-flexbox $important;
		display: flex $important;
    }
    @else {
		display: -webkit-box;
		display: -moz-box;
		display: -webkit-flex;
		display: -ms-flexbox;
		display: flex;
    }
}
@mixin display-inline-flex($important: '') {
    @if $important != '' {
		display: -webkit-inline-box $important;
		display: -moz-inline-box $important;
		display: -webkit-inline-flex $important;
		display: -ms-inline-flexbox $important;
		display: inline-flex $important;
    }
    @else {
		display: -webkit-inline-box;
		display: -moz-inline-box;
		display: -webkit-inline-flex;
		display: -ms-inline-flexbox;
		display: inline-flex;
    }
}
@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
		-moz-box-direction: reverse;
		-moz-box-orient: horizontal;
	}
	@else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
		-moz-box-direction: normal;
		-moz-box-orient: vertical;
	}
	@else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
		-moz-box-direction: reverse;
		-moz-box-orient: vertical;
	}
	@else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
		-moz-box-direction: normal;
		-moz-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}
@mixin flex-wrap($value: nowrap) {
	-webkit-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	}
	@else {
		-ms-flex-wrap: $value;
	}
	flex-wrap: $value;
}
@mixin flex-flow($values: (row nowrap)) {
	-webkit-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}
@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-moz-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-ms-flex-order: $int;
	order: $int;
}
@mixin flex-grow($int: 1) {
	-webkit-box-flex: $int;
	-moz-box-flex: $int;
	-webkit-flex-grow: $int;
	-ms-flex: $int;
	flex-grow: $int;
}
@mixin flex-shrink($int: 0) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex: $int;
	flex-shrink: $int;
}
@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	flex-basis: $value;
}
@mixin flex($fg: 1, $fs: 0, $fb: auto) {
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;
	// Box-Flex only supports a flex-grow value so lets grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}
	-webkit-box: $fg-boxflex;
	-moz-box: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}
@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-moz-box-pack: start;
		-ms-flex-pack: start;
	}
	@else if $value == flex-end {
		-webkit-box-pack: end;
		-moz-box-pack: end;
		-ms-flex-pack: end;
	}
	@else if $value == space-between {
		-webkit-box-pack: justify;
		-moz-box-pack: justify;
		-ms-flex-pack: justify;
	}
	@else if $value == space-around {
		-ms-flex-pack: distribute;
	}
	@else {
		-webkit-box-pack: $value;
		-moz-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	justify-content: $value;
}
@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-moz-box-align: start;
		-ms-flex-align: start;
	}
	@else if $value == flex-end {
		-webkit-box-align: end;
		-moz-box-align: end;
		-ms-flex-align: end;
	}
	@else {
		-webkit-box-align: $value;
		-moz-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	align-items: $value;
}
@mixin align-self($value: auto) {
	-webkit-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	}
	@else if $value == flex-end {
		-ms-flex-item-align: end;
	}
	@else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}
@mixin align-content($value: stretch) {
	-webkit-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	}
	@else if $value == flex-end {
		-ms-flex-line-pack: end;
	}
	@else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}

// menu

@mixin menu-ul-dropdown($selector-menu-item: '.menu-item', $selector-menu-item-has-children: '.menu-item-has-children', $selector-sub-menu: '.sub-menu') {
	$menu_arrow_down: '\f140' !default;
	$menu_arrow_left: '\f141' !default;
	$menu_arrow_right: '\f139' !default;
	$menu_arrow_up: '\f142' !default;
	list-style: none;
	padding: 0;
	margin: 0;
	> li#{$selector-menu-item} { // top level - all items
		display: inline-block;
		veritcal-align: middle;
	}
	> li#{$selector-menu-item-has-children} { // top level - parent items
		> a:after {
			content: $menu_arrow_down;
			font-family: dashicons;
			font-weight: normal;
			display: inline-block;
			vertical-align: top;
			-webkit-font-smoothing: antialiased;
			-moz-osx-font-smoothing: grayscale;
			color: inherit;
			background: transparent;
			position: relative;
			height: auto;
			width: auto;
			right: auto;
			line-height: inherit;
			transform: rotate(0);
			@include transition(transform);
		}
		> ul#{$selector-sub-menu} {
			list-style: none;
			padding: 0;
			margin: 0;
			text-align: left;
			position: absolute;
			visibility: hidden;
			opacity: 0;
			@include transition(opacity);
			max-width: 10em;
			@include hyphens;
			> li#{$selector-menu-item} {
				> a {
					display: block;
				}
			}
		}
		@include hover(&) {
			> a:after {
				transform: rotate(180deg);
			}
			> ul#{$selector-sub-menu} {
				visibility: visible;
				opacity: 1;
			}
		}
	}
}

@mixin menu-ul-current ($selector-menu-item: '.menu-item', $selector-current: ('.current-menu-parent', '.current-page-parent', '.current_page_parent', '.current_page_ancestor', '.current-menu-item', '.current-menu-ancestor', '.current-page-ancestor', '.current_page_item')) {
	> li#{$selector-menu-item} {
		$max: length($selector-current);
		@for $i from 1 through $max {
			$value: nth($selector-current, $i);
			&#{$value} {
				@content;
			}
		}
	}
}
